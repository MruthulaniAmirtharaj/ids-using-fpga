module fir_filter (
    input clk,
    input reset,
    input [9:0] data_in,   // ADC Input (10-bit)
    output reg [9:0] data_out // Filtered Output
);
    reg [9:0] shift_reg[0:4];  // 5-stage shift register
    integer i;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (i = 0; i < 5; i = i + 1) 
                shift_reg[i] <= 10'd0; // Initialize shift registers
            data_out <= 10'd0; // Initialize output
        end 
        else begin
            shift_reg[0] <= data_in;
            for (i = 1; i < 5; i = i + 1) 
                shift_reg[i] <= shift_reg[i - 1];

            // Moving Average Calculation (Avoid Division by Zero)
            if (shift_reg[4] != 0) 
                data_out <= (shift_reg[0] + shift_reg[1] + shift_reg[2] + shift_reg[3] + shift_reg[4]) / 5;
            else
                data_out <= 10'd0;
        end
    end
endmodule
 
