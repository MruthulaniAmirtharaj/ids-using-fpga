module uart_tx (
    input clk,              // System Clock (50 MHz)
    input reset,            // Reset signal
    input [7:0] data_in,    // Data to transmit
    input send,             // Send signal
    output reg tx           // UART TX output
);
    reg [3:0] bit_index;
    reg [9:0] shift_reg;
    reg [15:0] baud_counter;
    reg transmitting;

    parameter BAUD_RATE = 9600;
    parameter CLK_FREQ = 50000000;
    parameter BAUD_TICK = CLK_FREQ / BAUD_RATE; // ~5208 clock cycles per bit

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            tx <= 1'b1;  // Idle state is HIGH
            bit_index <= 4'd0;
            baud_counter <= 16'd0;
            transmitting <= 1'b0;
        end 
        else if (send && !transmitting) begin
            // Load shift register: {1 Stop Bit, 8 Data Bits, 1 Start Bit (0)}
            shift_reg <= {1'b1, data_in, 1'b0};
            transmitting <= 1'b1;
            bit_index <= 0;
        end 
        else if (transmitting) begin
            if (baud_counter == BAUD_TICK) begin
                baud_counter <= 0;
                tx <= shift_reg[0];
                shift_reg <= {1'b1, shift_reg[9:1]};
                bit_index <= bit_index + 1;

                if (bit_index == 9) // Transmission complete
                    transmitting <= 0;
            end 
            else 
                baud_counter <= baud_counter + 1;
        end 
    end
endmodule  
